""" heap sort 알고리즘을 수행한다. """



################################################################################
# left:
# input: index i
# return: i의 아들 (존재하면) 중 왼쪽에 위치한 수의 index
################################################################################
def left(i):
    
    return 2*i


################################################################################
# right:
# input: 위치 i 
# return: i의 아들 (존재하면) 중 오른쪽에 위치한 수의 위치 (index + 1)
################################################################################
def right(i):
    
    return 2*i + 1


################################################################################
# parent:
# input: 위치 i
# return: i의 바로 위에 연결된 수의 위치 (index + 1)
################################################################################
def parent(i):
    
    return i // 2


################################################################################
# max_heapify:
# input: 리스트 A, 위치 i 
# return: i를 root로 하는 sub-tree를 max_heap property를 만족하게 바꾼다.
################################################################################
def max_heapify(A, i):
    
    # 위치를 나타내는 변수 3개를 정의함
    l = 2 * i
    r = 2 * i + 1
    largest = i
    
    if l <= len(A) and A[l - 1] > A[largest- 1]:
        largest = l
    if r <= len(A) and A[r - 1] > A[largest - 1]:
        largest = r
    if largest != i:
        A[i - 1], A[largest - 1] = A[largest - 1], A[i - 1]
        max_heapify(A, largest)    
    
    return


################################################################################
# build_max_heap:
# input: 리스트 A
# return: max_heap property를 A 전체가 만족하도록 바꾼 리스트
################################################################################
def build_max_heap(A):
    
    n = len(A)
    for i in range(n // 2, 0, -1):
        max_heapify(A, i)
        
    return


################################################################################
# heap_sort:
# input: 리스트 A
# return: 정렬된 리스트 A
################################################################################
def heap_sort(A):
    
    n = len(A)
    build_max_heap(A)
    for i in range(n, 1, -1):
        A[0], A[i - 1] = A[i - 1], A[0]
        temp = A[0 : i - 1]
        max_heapify(temp, 1)
        A[0 : i - 1] = temp
        
    return


################################################################################
""" Script """
################################################################################
A = [i for i in range(100, 0, -1)]
heap_sort(A)