""" Maximum subarray Problem 을 O(n) 복잡도로 해결한다. """


################################################################################
# linear_maximum_subarray:
# input: 리스트 A
# output: 합이 최대가 되는 부분 수열의 처음과 끝 index, 그리고 그 합 (in tuple)
################################################################################
def linear_maximum_subarray(A):
    # M = i로 끝나는 부분 수열의 최댓값 
    M = A[0]
    M_max = M
    
    # 그 부분수열이 index low부터 high까지 있음을 알려주는 변수
    low = high = 0
    
    # M 과 low, high 업데이트
    for i in range(1, len(A)):
        if (M + A[i]) < A[i]:
            M = A[i]
            low = i
        else:
            M += A[i]
        # M의 최대값의 업데이트 
        if M_max < M:
            M_max = M
            high = i
    
    # low, high 그리고 M의 최댓값 출력
    return (M_max, low, high)
################################################################################



################################################################################
""" Script """
################################################################################
A = [i*(-1)**i for i in range(0, 100000)]
print(linear_maximum_subarray(A))